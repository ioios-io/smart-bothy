notify:
  - name: date_data
    platform: file
    filename: /config/cache/date_data.txt
    timestamp: true

automation:
  - alias: "Light State Dark Master"
    description: "Log when it gets dark"
    trigger:
      - entity_id: binary_sensor.dark_outside
        platform: state
        from: "off"
        to: "on"
    action:
      - service: notify.date_data
        data_template:
          message: "Master Dark. Sun Elevation: {{ states('sensor.solar_elevation') }}"
    mode: single
  - alias: "Light State Dark Sensor Rear"
    description: "Log when it gets dark: sensor 1"
    trigger:
      - entity_id: sensor.homs_yard_rear_light_level
        platform: state
        attribute: dark
        from: "false"
        to: "true"
    action:
      - service: notify.date_data
        data_template:
          message: "Yard Rear. Sun: {{ states('sensor.solar_elevation') }}. Lux: {{ states('sensor.homs_yard_rear_light_level') }}. Raw: {{ states.sensor.homs_yard_rear_light_level.attributes.lightlevel }}"
    mode: single
  - alias: "Light State Dark Sensor Side"
    description: "Log when it gets dark: sensor 2"
    trigger:
      - entity_id: sensor.homs_yard_side_light_level
        platform: state
        attribute: dark
        from: "false"
        to: "true"
    action:
      - service: notify.date_data
        data_template:
          message: "Yard Side. Sun: {{ states('sensor.solar_elevation') }}. Lux: {{ states('sensor.homs_yard_side_light_level') }}. Raw: {{ states.sensor.homs_yard_side_light_level.attributes.lightlevel }}"
    mode: single

  - alias: "Light State Light Master"
    description: "Log when it gets light"
    trigger:
      - entity_id: binary_sensor.dark_outside
        platform: state
        from: "on"
        to: "off"
    action:
      - service: notify.date_data
        data_template:
          message: "Master Light. Sun Elevation: {{ states('sensor.solar_elevation') }}"
    mode: single
  - alias: "Light State Light Sensor Rear"
    description: "Log when it gets light: sensor 1"
    trigger:
      - entity_id: sensor.homs_yard_rear_light_level
        platform: state
        attribute: dark
        from: "true"
        to: "false"
    action:
      - service: notify.date_data
        data_template:
          message: "Yard Rear. Sun: {{ states('sensor.solar_elevation') }}. Lux: {{ states('sensor.homs_yard_rear_light_level') }}. Raw: {{ states.sensor.homs_yard_rear_light_level.attributes.lightlevel }}"
    mode: single
  - alias: "Light State Light Sensor Side"
    description: "Log when it gets light: sensor 2"
    trigger:
      - entity_id: sensor.homs_yard_side_light_level
        platform: state
        attribute: dark
        from: "true"
        to: "false"
    action:
      - service: notify.date_data
        data_template:
          message: "Yard Side. Sun: {{ states('sensor.solar_elevation') }}. Lux: {{ states('sensor.homs_yard_side_light_level') }}. Raw: {{ states.sensor.homs_yard_side_light_level.attributes.lightlevel }}"
    mode: single

sensor:
  - platform: worldtidesinfo
    api_key: !secret worldTidesKey

  - platform: season
  - platform: moon
  - platform: time_date
    display_options:
      - "date_time_iso"

  - platform: file
    file_path: /config/cache/date_data.txt
    name: "Date Data File"

  - platform: template
    sensors:
      date_weekday:
        friendly_name: "Date: Weekday"
        value_template: "{{ as_timestamp(states('sensor.date_time_iso')) | timestamp_custom('%A') }}"
      date_date:
        friendly_name: "Date: String"
        value_template: >-
          {% set day = now().strftime("%-d") %}
          {%- if day | int == 1 or day | int == 21 or day | int == 31 -%}
            {{ day }}st
          {%- elif day | int == 2 or day | int == 22 -%}
            {{ day }}nd
          {%- elif day | int == 3 or day | int == 23 -%}
            {{ day }}rd
          {%- else -%}
            {{ day }}th
          {%- endif %}
      date_month:
        friendly_name: "Date: Month String"
        value_template: >-
          {% set month_full_name = now().strftime("%B") %}
          {{ month_full_name }}
      date_time_24:
        friendly_name: "Date: 24h Time"
        value_template: "{{ as_timestamp(states('sensor.date_time_iso')) | timestamp_custom('%H:%M') }}"
      date_time_12:
        friendly_name: "Date: 12h Time"
        value_template: "{{ as_timestamp(states('sensor.date_time_iso')) | timestamp_custom('%I:%M %p') }}"
      date_full_string:
        friendly_name: "Date: Full String"
        value_template: "{{ states('sensor.date_weekday') }}, {{ states('sensor.date_string') }}"

      # STOLEN FROM https://community.home-assistant.io/t/next-dawn-next-dusk-in-automation/45339/13?u=ioios-io
      period_of_day:
        friendly_name: "Period of the Day"
        value_template: >-
          {% set elevation = state_attr('sun.sun', 'elevation') | float %}
          {% set max_elevation = states('solar_max_elevation') | float %}
          {% set rising = state_attr('sun.sun', 'rising') %}
          {%- if elevation <= -18 -%}
            Night
          {%- elif -18 < elevation <= -12 -%}
            {{ 'Astronomical Dawn' if rising else 'Astronomical Dusk' }}
          {%- elif -12 < elevation <= -6 -%}
            {{ 'Nautical Dawn' if rising else 'Nautical Dusk' }}
          {%- elif -6 < elevation <= 0 -%}
            {{ 'Civil Dawn' if rising else 'Civil Dusk' }}
          {%- elif elevation <= max_elevation -%}
            High Noon
          {%- else -%}
            Day
          {%- endif -%}
        icon_template: >-
          {% set elevation = state_attr('sun.sun', 'elevation') | float %}
          {% set max_elevation = states('solar_max_elevation') | float %}
          {% set rising = state_attr('sun.sun', 'rising') %}
          {%- if elevation <= -6 -%}
            {{ states.sensor.moon.attributes.icon }}
          {%- elif -6 < elevation <= 0 -%}
            mdi:weather-sunset-{{ 'up' if rising else 'down' }}
          {%- elif elevation <= max_elevation -%}
            mdi:weather-sunny-alert
          {%- else -%}
              mdi:weather-{{ states.weather.portree.state }}
          {%- endif %}
        attribute_templates:
          Next Sunset: "{{ states.sun.sun.attributes.next_setting }}"
          Next Sunrise: "{{ states.sun.sun.attributes.next_rising }}"
          Moon Phase: "{{ states('sensor.moon') | replace('_',' ') | title }}"

      # STOLEN FROM https://community.home-assistant.io/t/circadian-light-with-philips-hue-independent-from-world-clocks/45435
      # Strip out the elevation and azimuth from the Sun object.
      solar_elevation:
        friendly_name: "Solar Angle"
        unit_of_measurement: "°"
        value_template: "{{ '%+.2f' | format(state_attr('sun.sun', 'elevation')) | float }}"
        icon_template: "{{ 'mdi:angle-acute' }}"

      # One day I might get solar panels :)
      solar_azimuth:
        friendly_name: "Solar Azimuth"
        unit_of_measurement: "°"
        value_template: "{{ '%+.2f' | format(state_attr('sun.sun', 'azimuth')) | float }}"
        icon_template: "{{ 'mdi:angle-obtuse' }}"

      # Calculate the highest elevation today for use in Circadian formula and to denote High Noon.
      solar_max_elevation:
        friendly_name: "Maximum Solar Elevation Angle"
        unit_of_measurement: "°"
        icon_template: "{{ 'mdi:angle-acute' }}"
        value_template: >
          {% set deg = pi / 180.0 %}
          {% set N = now().strftime("%j") | int %}
          {% set L = state_attr('zone.home','latitude') | float %}
          {% set D = (-1 * asin(0.39779 * cos(0.98565 * deg * (N + 10) + 1.914 * deg * sin(0.98565 * deg * (N - 2))))) / deg %}

          {{ (asin(sin(L * deg) * sin(D * deg) + cos(L * deg) * cos(D * deg)) / deg) | round(2) }}

      # Calculate the mired value for (attempted) colour consistency throughout the day
      circadian_light:
        friendly_name: "Calculated Circadian Light Value"
        unit_of_measurement: "mired"
        icon_template: "{{ 'mdi:shield-sun-outline' }}"
        value_template: >
          {% set mired_min = 170 %}
          {% set mired_max = 420 %}
          {% set elev_at_mired_max = -2 %}
          {% set mired_night = 420 %}

          {% if is_state('sun.sun', 'above_horizon') or is_state('sun.sun', 'below_horizon') %}
            {% if states('sensor.solar_elevation') | int > elev_at_mired_max %}
              {{ (mired_max - (states('sensor.solar_elevation') | int - elev_at_mired_max) * (mired_max - mired_min) / (states('sensor.solar_max_elevation') | int - elev_at_mired_max) ) | int }}
            {% else %}
              {{ mired_night }}
            {% endif %}
          {% else %}
            {{ mired_night }}
          {% endif %}
