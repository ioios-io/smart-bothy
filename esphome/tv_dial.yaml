substitutions:
  # UNIQUE NAME FOR THE DEVICE
  deviceName: tv_pithy_dial
  deviceUpper: Living Room TV Dial

  # ENTITY MAPPING FOR THE DIFFERENT FUNCTIONS
  mediaPlayer: living_room # ID OF MEDIA PLAYER IN HA
  lightGroup: living_room_lights
  
  # SWITCH MAPPING. SELECT THE SWITCH FOR EACH ACTION
  switchMenu: ${sideSwitch}
  switchAction: ${encoderSwitch}
  
  # WIFI AND OTHER CREDENTIALS. USE SECRETS WHERE POSSIBLE
  wifiPass: !secret wifiPass
  wifiSSID: !secret wifiSSID
  passOTA: !secret passOTA
  passESPH: !secret passESPH
  
  # ESP DECLARATION
  boardPlatform: ESP8266
  boardName: d1_mini
  
  # PIN MAPPING. DEFAULTS TO ioios.io PITHY AND COUNTER DEVICES
  encoderPinA: D5
  encoderPinB: D6
  encoderSwitch: D7
  i2cData: D4
  i2cClock: D3
  pirSensor: D1
  sideSwitch: TX
  neoPixels: RX

###############################################################################
# WHOA WHERE ARE YOU GOING? GO STEADY BEYOND HERE, THIS IS THE BREAKABLE BIT! #
###############################################################################

esphome:
  name: ${deviceName}
  platform: ${boardPlatform}
  board: ${boardName}
  on_boot:
    priority: 200
    then:
      - binary_sensor.template.publish:
          id: api_connected
          state: OFF
      - wait_until:
          api.connected
      - delay: 15s
      - binary_sensor.template.publish:
          id: api_connected
          state: ON

wifi:
  ssid: ${wifiSSID}
  password: ${wifiPass}

captive_portal:
logger:
ota:
  safe_mode: True
  password: ${passOTA}
  
time:
  - platform: homeassistant
    id: homeassistant_time
    
api:
  password: ${passESPH}
        
globals:
  - id: new_volume
    type: float
    initial_value: '0'
      
switch:
  - platform: restart
    name: "ESP Restart ${deviceUpper}"

text_sensor:
  - platform: homeassistant
    id: media_state
    entity_id: media_player.${mediaPlayer}
    internal: true

sensor:
  - platform: wifi_signal
    name: ESP Signal ${deviceUpper}
    update_interval: 60s

  - platform: uptime
    name: ESP Uptime ${deviceUpper}
    update_interval: 60s

  - platform: homeassistant
    id: media_volume
    entity_id: sensor.${mediaPlayer}_volume
    internal: true
    on_value:
      then:
        - sensor.rotary_encoder.set_value:
            id: rotary_dial
            value: !lambda 'return x;'
            
  - platform: rotary_encoder
    id: rotary_dial
    pin_a:
      number: ${encoderPinA}
      inverted: true
      mode: INPUT_PULLUP
    pin_b:
      number: ${encoderPinB}
      inverted: true
      mode: INPUT_PULLUP
    filters:
      - debounce: 0.1s
    resolution: 1
    min_value: 0
    max_value: 100
    on_value:
      - then:
          - globals.set:
              id: new_volume
              value: !lambda 'return id(rotary_dial).state / 100;'
          - homeassistant.service:
              service: media_player.volume_set
              data:
                entity_id: media_player.${mediaPlayer}
                volume_level: !lambda 'return id(new_volume);'
          

binary_sensor:
  - platform: template
    id: api_connected

  - platform: gpio
    pin:
      number: ${switchAction}
      inverted: true
      mode: INPUT_PULLUP
    name: Action ${deviceUpper}
    internal: true
    on_multi_click:
    - timing:
      - ON for at most 1s
      - OFF for at most 1s
      - ON for at most 1s
      - OFF for at least 0.2s
      then:
        - logger.log: "Double Click"
        - homeassistant.service:
            service: media_player.media_next_track
            data_template:
              entity_id: media_player.${mediaPlayer}
    - timing:
      - ON for 0.6s to 3s
      - OFF for at least 0.1s
      then:
        - logger.log: "Long Click"
        - homeassistant.service:
            service: media_player.toggle
            data_template:
              entity_id: media_player.${mediaPlayer}
    - timing:
      - ON for at most 0.5s
      - OFF for at least 0.4s
      then:
        - logger.log: "Single Click"
        - homeassistant.service:
            service: media_player.media_play_pause
            data_template:
              entity_id: media_player.${mediaPlayer}

  - platform: gpio
    pin:
      number: ${switchMenu}
      inverted: true
      mode: INPUT_PULLUP
    name: Action ${deviceUpper}
    internal: true
    <<: !include includes/sceneTiming.yaml